#!/usr/bin/env bash

set -euxo pipefail

current_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

source "${current_dir}/../lib/utils.sh"

function step() {
  log "@@ ${1}"
}

step 'starting arch installation'

# @@ collect data
step 'collecting data'

hostname=$(dialog --stdout --inputbox 'Enter hostname' 0 0) || exit 1
clear
: "${hostname:?'hostname cannot be empty'}"

username=$(dialog --stdout --inputbox 'Enter username' 0 0) || exit 1
clear
: "${username:?'username cannot be empty'}"

password=$(dialog --stdout --passwordbox 'Enter user password' 0 0) || exit 1
clear
: "${password:?'password cannot be empty'}"
password2=$(dialog --stdout --passwordbox 'Enter user password again' 0 0) || exit 1
clear
[[ "${password}" == "${password2}" ]] || ( echo 'Passwords did not match'; exit 1; )

password_root=$(dialog --stdout --passwordbox 'Enter root password' 0 0) || exit 1
clear
: "${password_root:?'password cannot be empty'}"
password_root2=$(dialog --stdout --passwordbox 'Enter root password again' 0 0) || exit 1
clear
[[ "${password_root}" == "${password_root2}" ]] || ( echo 'Passwords did not match'; exit 1; )

mapfile -t devicelist < <(lsblk -dplnx size -o name,size | grep -Ev 'boot|rpmb|loop' | tac | tr -s ' ')
disk=$(dialog --stdout --menu 'Select installation disk' 0 0 0 ${devicelist[@]}) || exit 1
clear

# @@ define vars
step 'defining vars'

vg='vg0'
lv_root='lv_root'
lv_var='lv_var'
lv_home='lv_home'
lv_root_size='10GB'
lv_var_size='10GB'
lv_home_size='100%FREE'

function find_partition() {
  find /dev -iwholename "${disk}*" | grep -E "^${disk}p?${1}$"
}

export console_font='ter-m32n'
export console_font_path="/usr/share/kbd/consolefonts/${console_font}.psf.gz"

# @@ setup logging
step '@@ setting up log files'

exec 1> >(tee 'stdout.log')
exec 2> >(tee 'stderr.log')

# @@ log installation parameters
step 'installation params:'

log "\tdisk: ${disk}"
log "\t/ size: ${lv_root_size}"
log "\t/var size: ${lv_var_size}"
log "\t/home size: ${lv_home_size}"

# @@ warm up pacman
step 'warming up pacman'
pacman -Syyy

# TODO: network connection

# @@ set console font
step 'setting console font'

pacman -S --noconfirm terminus-font

setfont "${console_font_path}"

# @@ update system time/date
step 'updating system time/date'

timedatectl set-ntp true

# @@ create partitions
step 'creating partitions'

shred -v -n1 "${disk}"

sgdisk --zap-all "${disk}"

parted -s "${disk}" -- \
  mklabel gpt \
  mkpart primary 0% 512MiB \
  mkpart primary 512MiB 100% \
  set 1 esp on

part_efi="$(find_partition 1)"
part_luks_lvm="$(find_partition 2)"
part_root="/dev/${vg}/${lv_root}"
part_var="/dev/${vg}/${lv_var}"
part_home="/dev/${vg}/${lv_home}"

# @@ setup luks
step 'seting up luks'

modprobe dm-crypt
cryptsetup luksFormat "${part_luks_lvm}"
cryptsetup open --type luks "${part_luks_lvm}" lvm-on-luks

# @@ setup lvm
step 'setting up lvm'

pvcreate --dataalignment 1m /dev/mapper/lvm-on-luks
vgcreate "${vg}" /dev/mapper/lvm-on-luks
lvcreate -L "${lv_root_size}" "$vg" --name "${lv_root}"
lvcreate -L "${lv_var_size}"  "$vg" --name "${lv_var}"
lvcreate -l "${lv_home_size}" "$vg" --name "${lv_home}"

# @@ format partitions
step 'formatting partitions'

mkfs.fat -F32 "${part_efi}"
mkfs.ext4 "${part_root}"
mkfs.ext4 "${part_var}"
mkfs.ext4 "${part_home}"

# @@ mount partitions
step 'mouting partitions'

mount "/dev/${vg}/${lv_root}" /mnt

mkdir /mnt/boot
mkdir /mnt/var
mkdir /mnt/home

mount "${part_efi}" /mnt/boot
mount "${part_var}" /mnt/var
mount "${part_home}" /mnt/home

# @@ install packages
step 'pacstrapping'

pacstrap /mnt \
  base \
  linux \
  linux-headers \
  linux-lts \
  linux-lts-headers \
  linux-firmware \
  lvm2 \
  sudo \
  terminus-font \
  zsh \

# @@ generate fstab
step 'generating fstab'

genfstab -U -p /mnt >> /mnt/etc/fstab

# @@ create swap file
step 'creating swap file'

fallocate -l 2G /mnt/swapfile
chmod 600 /mnt/swapfile
mkswap /mnt/swapfile
echo '/swapfile non swap sw 0 0' | tee -a /mnt/etc/fstab

# @@ persist console font
step 'persisting console font'

cat > /mnt/etc/vconsole.conf << EOF
FONT=${console_font}
EOF

# @@ set hostname
step 'setting hostname'

echo "${hostname}" > /mnt/etc/hostname

cat > /mnt/etc/hosts << EOF
127.0.0.1 localhost
::1       localhost
127.0.1.1 ${hostname}.localdomain ${hostname}
EOF

# @@ mkinitcpio
step 'mkinitcpio'

sed -i \
  's/^\(HOOKS=\).*$/\1(base udev autodetect keyboard consolefont modconf block encrypt lvm2 filesystems fsck)/' \
  /mnt/etc/mkinitcpio.conf

arch-chroot /mnt mkinitcpio --preset linux
arch-chroot /mnt mkinitcpio --preset linux-lts

# @@ locale
step 'setting up locale'

sed -i \
  's/\#en_US.UTF-8/en_US.UTF-8/' \
  /mnt/etc/locale.gen

arch-chroot /mnt locale-gen

cat > /mnt/etc/locale.conf <<EOF
LANG=en_US.UTF-8
EOF

ln -s /mnt/usr/share/zoneinfo/America/Sao_Paulo /mnt/etc/localtime

arch-chroot /mnt hwclock --systohc

# @@ setup bootloader
step 'setting up bootloader'

arch-chroot /mnt bootctl --path=/boot install

cat <<EOF > /mnt/boot/loader/loader.conf
default arch
timeout 3
EOF

cat <<EOF > /mnt/boot/loader/entries/arch.conf
title    Arch Linux
linux    /vmlinuz-linux
initrd   /initramfs-linux.img
options  cryptdevice=PARTUUID=$(blkid -s PARTUUID -o value "${part_luks_lvm}"):${vg} root=/dev/mapper/${vg}-${lv_root} rw
EOF

# @@ setup users and groups
step 'creating users and groups'

arch-chroot /mnt groupadd sudo

arch-chroot /mnt useradd --shell /usr/bin/zsh --create-home --user-group --groups sudo "${username}"

arch-chroot /mnt bash -c "echo \"${username}:${password}\" | chpasswd"
arch-chroot /mnt bash -c "echo \"root:${password_root}\"   | chpasswd"

visudo /mnt/etc/sudoers

# @@ wrap up
step 'wrapping up'

umount -R /mnt

step 'installation finished'
