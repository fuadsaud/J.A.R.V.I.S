#!/usr/bin/env bash

set -euxo pipefail

current_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

source "${current_dir}/../lib/utils.sh"

function collect_data {
  step 'collecting data'

  hostname=$(dialog --stdout --inputbox 'Enter hostname' 0 0) || exit 1
  clear
  : "${hostname:?'hostname cannot be empty'}"

  username=$(dialog --stdout --inputbox 'Enter username' 0 0) || exit 1
  clear
  : "${username:?'username cannot be empty'}"

  password=$(dialog --stdout --passwordbox 'Enter user password' 0 0) || exit 1
  clear
  : "${password:?'password cannot be empty'}"
  password2=$(dialog --stdout --passwordbox 'Enter user password again' 0 0) || exit 1
  clear
  [[ "${password}" == "${password2}" ]] || ( echo 'Passwords did not match'; exit 1; )

  password_root=$(dialog --stdout --passwordbox 'Enter root password' 0 0) || exit 1
  clear
  : "${password_root:?'password cannot be empty'}"
  password_root2=$(dialog --stdout --passwordbox 'Enter root password again' 0 0) || exit 1
  clear
  [[ "${password_root}" == "${password_root2}" ]] || ( echo 'Passwords did not match'; exit 1; )

  mapfile -t devicelist < <(lsblk -dplnx size -o name,size | grep -Ev 'boot|rpmb|loop' | tac | tr -s ' ')
  disk=$(dialog --stdout --menu 'Select installation disk' 0 0 0 ${devicelist[@]}) || exit 1
  clear
}

function define_vars {
  step 'defining vars'

  vg='vg0'
  lv_root='lv_root'
  lv_var='lv_var'
  lv_home='lv_home'
  lv_root_size='30GB'
  lv_var_size='1GB'
  lv_home_size='100%FREE'
  console_font='ter-m32n'
  console_font_path="/usr/share/kbd/consolefonts/${console_font}.psf.gz"
}

function find_partition {
  find /dev -iwholename "${disk}*" | grep -E "^${disk}p?${1}$"
}

function warmup_pacman {
  step 'warming up pacman'

  pacman -Syyy
}

function setup_consolefont {
  step 'setting console font'

  pacman -S --noconfirm terminus-font

  setfont "${console_font_path}"
}

function enable_ntp {
  step 'updating system time/date'

  timedatectl set-ntp true
}

function create_partitions {
  step 'creating partitions'

  shred -v -n1 "${disk}"

  sgdisk --zap-all "${disk}"

  parted -s "${disk}" -- \
    mklabel gpt \
    mkpart primary 0% 512MiB \
    mkpart primary 512MiB 100% \
    set 1 esp on
}

function setup_luks {
  step 'seting up luks'

  modprobe dm-crypt
  cryptsetup luksFormat "${part_luks_lvm}"
  cryptsetup open --type luks "${part_luks_lvm}" lvm-on-luks
}

function setup_lvm {
  step 'setting up lvm'

  pvcreate --dataalignment 1m /dev/mapper/lvm-on-luks
  vgcreate "${vg}" /dev/mapper/lvm-on-luks
  lvcreate -L "${lv_root_size}" "$vg" --name "${lv_root}"
  lvcreate -L "${lv_var_size}"  "$vg" --name "${lv_var}"
  lvcreate -l "${lv_home_size}" "$vg" --name "${lv_home}"
}

function format_partitions {
  step 'formatting partitions'

  mkfs.fat -F32 "${part_efi}"
  mkfs.ext4 "${part_root}"
  mkfs.ext4 "${part_var}"
  mkfs.ext4 "${part_home}"
}

function mount_partitions {
  step 'mouting partitions'

  mount "/dev/${vg}/${lv_root}" /mnt

  mkdir /mnt/boot
  mkdir /mnt/var
  mkdir /mnt/home

  mount "${part_efi}" /mnt/boot
  mount "${part_var}" /mnt/var
  mount "${part_home}" /mnt/home
}

function run_pacstrap {
  step 'pacstrapping'

  local packages=(
    base
    base-devel
    git
    linux
    linux-headers
    linux-lts
    linux-lts-headers
    linux-firmware
    lvm2
    networkmanager
    screen
    sudo
    terminus-font
    vim
    zsh
  )

  pacstrap /mnt "${packages[@]}"
}

function generate_fstab {
  step 'generating fstab'

  genfstab -U -p /mnt >> /mnt/etc/fstab
}

function create_swapfile {
  step 'creating swap file'

  fallocate -l 2G /mnt/swapfile
  chmod 600 /mnt/swapfile
  mkswap /mnt/swapfile
  echo '/swapfile non swap sw 0 0' | tee -a /mnt/etc/fstab
}

function persist_consolefont {
  step 'persisting console font'

  cat > /mnt/etc/vconsole.conf << EOF
  FONT=${console_font}
EOF
}

function set_hostname {
  step 'setting hostname'

  echo "${hostname}" > /mnt/etc/hostname

  cat > /mnt/etc/hosts << EOF
  127.0.0.1 localhost
  ::1       localhost
  127.0.1.1 ${hostname}.localdomain ${hostname}
EOF
}

function run_mkinitcpio {
  step 'mkinitcpio'

  sed -i \
    's/^\(HOOKS=\).*$/\1(base udev autodetect keyboard consolefont modconf block encrypt lvm2 filesystems fsck)/' \
    /mnt/etc/mkinitcpio.conf

  arch-chroot /mnt mkinitcpio --preset linux
  arch-chroot /mnt mkinitcpio --preset linux-lts
}

function setup_locale {
  step 'setting up locale'

  sed -i \
    's/\#en_US.UTF-8/en_US.UTF-8/' \
    /mnt/etc/locale.gen

  arch-chroot /mnt locale-gen

  cat > /mnt/etc/locale.conf <<EOF
  LANG=en_US.UTF-8
EOF

  ln -s /mnt/usr/share/zoneinfo/America/Sao_Paulo /mnt/etc/localtime

  arch-chroot /mnt hwclock --systohc
}

function setup_bootloader {
  step 'setting up bootloader'

  arch-chroot /mnt bootctl --path=/boot install

  cat <<EOF > /mnt/boot/loader/loader.conf
  default arch
  timeout 3
EOF

  cat <<EOF > /mnt/boot/loader/entries/arch.conf
  title    Arch Linux
  linux    /vmlinuz-linux
  initrd   /initramfs-linux.img
  options  cryptdevice=PARTUUID=$(blkid -s PARTUUID -o value "${part_luks_lvm}"):${vg} root=/dev/mapper/${vg}-${lv_root} rw
EOF
}

function create_users_and_groups {
  step 'creating users and groups'

  arch-chroot /mnt groupadd sudo

  arch-chroot /mnt useradd --shell /usr/bin/zsh --create-home --user-group --groups sudo "${username}"

  arch-chroot /mnt bash -c "echo \"${username}:${password}\" | chpasswd"
  arch-chroot /mnt bash -c "echo \"root:${password_root}\"   | chpasswd"

  visudo /mnt/etc/sudoers
}

function setup_networking {
  step 'setting up networking'

  arch-chroot /mnt systemctl enable NetworkManager
}

function wrap_up {
  step 'wrapping up'

  umount -R /mnt

  step 'installation finished'
}

function define_partition_vars {
  part_efi="$(find_partition 1)"
  part_luks_lvm="$(find_partition 2)"
  part_root="/dev/${vg}/${lv_root}"
  part_var="/dev/${vg}/${lv_var}"
  part_home="/dev/${vg}/${lv_home}"
}

step 'setting up log files'

exec 1> >(tee 'stdout.log')
exec 2> >(tee 'stderr.log')

step 'starting arch installation'

# TODO: network connection

collect_data
define_vars
enable_ntp
warmup_pacman
setup_consolefont
create_partitions
define_partition_vars
setup_luks
setup_lvm
format_partitions
mount_partitions
run_pacstrap
generate_fstab
create_swapfile
persist_consolefont
set_hostname
run_mkinitcpio
setup_locale
setup_bootloader
create_users_and_groups
setup_networking
wrap_up
