#!/usr/bin/env bash

set -euo pipefail

current_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

# TODO: select disk with dialog

if lsblk | grep nvme0n1; then
  DISK="/dev/nvme0n1"
else
  DISK="/dev/sda"
fi

VG="vg0"
LV_ROOT="lv_root"
LV_VAR="lv_var"
LV_HOME="lv_home"
LV_ROOT_SIZE="10GB"
LV_VAR_SIZE="10GB"
LV_HOME_SIZE="100%FREE"

function find_partition() {
  find /dev -iwholename "${DISK}*" | grep -E "^${DISK}p?${1}$"
}

PART_EFI="$(find_partition 1)"
PART_LUKS_LVM="$(find_partition 2)"
PART_ROOT="/dev/${VG}/${LV_ROOT}"
PART_VAR="/dev/${VG}/${LV_VAR}"
PART_HOME="/dev/${VG}/${LV_HOME}"

export CONSOLE_FONT="ter-m32n"
export CONSOLE_FONT_PATH="/usr/share/kbd/consolefonts/$CONSOLE_FONT.psf.gz"

# @@ setup logging
exec 1> >(tee "stdout.log")
exec 2> >(tee "stderr.log")

# @@ log installation parameters
echo "disk: ${DISK}"
echo "/ size: $LV_ROOT_SIZE"
echo "/var size: $LV_VAR_SIZE"
echo "/home size: $LV_HOME_SIZE"

# @@ warm up pacman
pacman -Syyy

# TODO: network connection

# @@ set console font

pacman -S --noconfirm terminus-font

setfont "$CONSOLE_FONT_PATH"

# @@ update system time/date

timedatectl set-ntp true

# @@ create partitions

shred -v -n1 "$DISK"

sgdisk --zap-all "$DISK"

parted -s "$DISK" -- \
  mklabel gpt \
  mkpart primary 0% 512MiB \
  mkpart primary 512MiB 100% \
  set 1 esp on

# @@ setup luks

modprobe dm-crypt
cryptsetup luksFormat "${PART_LUKS_LVM}"
cryptsetup open --type luks "${PART_LUKS_LVM}" lvm-on-luks

# @@ setup lvm

pvcreate --dataalignment 1m /dev/mapper/lvm-on-luks
vgcreate "$VG" /dev/mapper/lvm-on-luks
lvcreate -L "${LV_ROOT_SIZE}" "$VG" --name "${LV_ROOT}"
lvcreate -L "${LV_VAR_SIZE}"  "$VG" --name "${LV_VAR}"
lvcreate -l "${LV_HOME_SIZE}" "$VG" --name "${LV_HOME}"

# @@ format partitions

mkfs.fat -F32 "${PART_EFI}"
mkfs.ext4 "${PART_ROOT}"
mkfs.ext4 "${PART_VAR}"
mkfs.ext4 "${PART_HOME}"

# @@ mount partitions

mount "/dev/${VG}/${LV_ROOT}" /mnt

mkdir /mnt/boot
mkdir /mnt/var
mkdir /mnt/home

mount "${PART_EFI}" /mnt/boot
mount "${PART_VAR}" /mnt/var
mount "${PART_HOME}" /mnt/home

# @@ install packages

pacstrap -i /mnt \
  base \
  base-devel \
  dhcpcd \
  dialog \
  dosfstools \
  efibootmgr \
  git \
  gnome \
  grub \
  linux \
  linux-headers \
  linux-lts \
  linux-lts-headers \
  linux-firmware \
  lvm2 \
  man-db \
  man-pages \
  mtools \
  openssh \
  os-prober \
  sudo \
  terminus-font \
  tmux \
  vim \
  zsh \
  networkmanager  \
  networkmanager-openvpn \
  network-manager-applet \
  wireless_tools \
  wpa_supplicant \

# @@ generate fstab

genfstab -U -p /mnt >> /mnt/etc/fstab

# @@ create swap file

fallocate -l 2G /mnt/swapfile
chmod 600 /mnt/swapfile
mkswap /mnt/swapfile
echo '/swapfile non swap sw 0 0' | tee -a /mnt/etc/fstab

# @@ persist console font

cat > /mnt/etc/vconsole.conf << EOF
FONT=${CONSOLE_FONT}
EOF

# @@ setup bootloader

arch-chroot /mnt bootctl --path=/boot install

cat <<EOF > /mnt/boot/loader/loader.conf
default arch
timeout 3
EOF

cat <<EOF > /mnt/boot/loader/entries/arch.conf
title    Arch Linux
linux    /vmlinuz-linux
initrd   /initramfs-linux.img
options  cryptdevice=PARTUUID=$(blkid -s PARTUUID -o value "$PART_LUKS_LVM"):${VG} root=/dev/mapper/${VG}-${LV_ROOT} rw
EOF

# @@ chroot

# TODO: slurp separate script into here

cp "${current_dir}/arch-post-chroot" /mnt/root/arch-post-chroot

arch-chroot /mnt /root/arch-post-chroot

rm /mnt/root/setup-chroot

# @@ wrap up

umount -R /mnt

echo 'Installation finished.'
