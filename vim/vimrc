""
" vimrc by fs
"
set nocompatible
set encoding=utf-8
set modelines=0
set visualbell
set noshowmode
set showcmd
set relativenumber
set cursorline
set hidden
set title
set showmatch
set list
" set listchars+=eol:$
set nobackup
set noswapfile
set undofile
set wildmenu
set wildmode=longest,full

syntax on
filetype plugin indent on

"" Whitespace
set autoindent
set copyindent
set nowrap
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround
set smarttab
set expandtab                  " use soft tabs (spaces)
set backspace=indent,eol,start " backspace through everythong in insert mode

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault

set omnifunc=syntaxcomplete#Complete " completion stuff

"" Initialize Vundle
set rtp+=~/.vim/bundle/vundle/
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
call vundle#rc()

Bundle 'gmarik/vundle'

Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'mattn/gist-vim'
Bundle 'mattn/zencoding-vim'
Bundle 'scrooloose/nerdtree'
Bundle 'kien/ctrlp.vim'
Bundle 'sjl/gundo.vim'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'garbas/vim-snipmate'
Bundle 'honza/vim-snippets'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'gregsexton/MatchTag'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'yurifury/hexHighlight'
Bundle 'godlygeek/tabular'

Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-rbenv'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-liquid'
Bundle 'thoughtbot/vim-rspec'
Bundle 'kchmck/vim-coffee-script'
Bundle 'pangloss/vim-javascript'
Bundle 'itspriddle/vim-jquery.git'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'jtratner/vim-flavored-markdown.git'

Bundle 'jpo/vim-railscasts-theme'
Bundle 'altercation/vim-colors-solarized'
Bundle 'bling/vim-airline'

" enable powerline for airline
let g:airline_powerline_fonts=1

" Enhance Netrw usability
let g:netrw_browse_split=4
let g:netrw_altv=1

if has('autocmd')
  " Automatically refresh vimrc
  " autocmd BufWritePost .vimrc source $MYVIMRC

  " if has('gui_running')
    " autocmd BufWritePost .gvimrc source $MYGVIMRC
  " endif

  autocmd FocusLost * :wall

  " NERDTree
  autocmd vimenter * if !argc() | NERDTree | endif
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
endif

" Keymaps

let mapleader=','

" default / to perl-style regexp's
nnoremap / /\v
vnoremap / /\v

" remove highligted terms
nnoremap <Leader><Space> :noh<CR>

" use tab to jump between matching brackets
nnoremap <Tab> %

" delete trailing whitespace
nnoremap <Leader>W :%s/\s\+$//<CR>:let @/=''<CR>

" re-hardwrap text
nnoremap <Leader>q gqip

" reselect last pasted text
nnoremap <Leader>v V`]

" go from insert to normal mode
inoremap jj <Esc>

" disable arrows
noremap  <Up>    <Nop>
noremap  <Down>  <Nop>
noremap  <Left>  <Nop>
noremap  <Right> <Nop>

" easier navigation between split windows
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

map <Leader>n :NERDTreeToggle<CR>
map <Leader>, :tabedit $MYVIMRC<CR>

nnoremap <Leader>u :GundoToggle<CR>
